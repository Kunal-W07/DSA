#include <unordered_map>
#include <string>

class Solution {
public:
    void createmapping(std::unordered_map<char, char> &mapping, const std::string &key) {
        char start = 'a';
        for (int i = 0; i < key.length(); i++) {
            if (key[i] != ' ' && mapping.find(key[i]) == mapping.end()) {
                mapping[key[i]] = start;
                start++;
            }
        }
    }

    std::string checkmapping(const std::unordered_map<char, char> &mapping, const std::string &message) {
        std::string ans; // Initialize an empty string
        for (int i = 0; i < message.length(); i++) {
            char check = mapping.count(message[i]) ? mapping.at(message[i]) : message[i]; // Check if character exists in mapping
            ans.push_back(check);
        }
        return ans; 
    }

    std::string decodeMessage(const std::string &key, const std::string &message) {
        std::unordered_map<char, char> mapping;
        mapping[' '] = ' '; // Map space to space
        createmapping(mapping, key);
        return checkmapping(mapping, message); // Return the decoded message
    }
};
