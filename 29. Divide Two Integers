class Solution {
public: 
    long long find(long long dividend, long long divisor, long long &store) {
        long long s = -dividend;  // Start with the negative range
        long long e = dividend;  // End with the positive range

        while (s <= e) {
            long long mid = s + (e - s) / 2;
            long long mul = divisor * mid;
            if (mul == dividend) {
                return mid;
            }
            if (mul < dividend) {
                store = mid;
                s = mid + 1;
            } else {
                e = mid - 1;
            }
        }
        return store;
    }

    int divide(int dividend, int divisor) {
        // Special case: handle INT_MIN
        if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX; // Avoid overflow
        }

        long long store = -1;

        // Use long long to handle absolute values of INT_MIN
        long long absDividend = abs((long long)dividend);
        long long absDivisor = abs((long long)divisor);

        long long ans = find(absDividend, absDivisor, store);

        // Adjust the result based on the original signs
        if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
            ans = -ans;
        }

        return ans;
    }
};
